{
    "version": "https://jsonfeed.org/version/1",
    "title": "DuoLa口袋不放糖 • All posts by \"算法\" tag",
    "description": "人来人往，盼青龙上岸，只怪你我相见恨晚",
    "home_page_url": "https://github.com/Catlina-2B/catlina-2B.github.io",
    "items": [
        {
            "id": "https://github.com/Catlina-2B/catlina-2B.github.io/2022/04/03/twoPlus/",
            "url": "https://github.com/Catlina-2B/catlina-2B.github.io/2022/04/03/twoPlus/",
            "title": "两数相加",
            "date_published": "2022-04-03T09:46:00.000Z",
            "content_html": "<h1 id=\"学算法\"><a class=\"markdownIt-Anchor\" href=\"#学算法\">#</a> 学算法</h1>\n<p>昨天于晚上时间开始了长达一个多小时时间的算法学习过程，今天巩固了一下昨天的所学知识，准备开始今天的题目学习。<br>\n我信心满满地打开了力扣题库中的第二题，名叫：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYWRkLXR3by1udW1iZXJz\">两数相加</span>，好家伙，力扣题库中扑面而来的前两道题竟然都是做加法的题🥲</p>\n<p>fine，同样的</p>\n<h2 id=\"看一下题目\"><a class=\"markdownIt-Anchor\" href=\"#看一下题目\">#</a> 看一下题目</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>给你两个非空的<span class=\"token code-snippet code keyword\">`链表`</span>，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>请你将两个数相加，并以相同形式返回一个表示和的链表。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>你可以假设除了数字 0 之外，这两个数都不会以 0  开头。</pre></td></tr></table></figure><p>示例 1：<br>\n<img data-src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" width=\"480\" border=\"10\" /></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>输入：l1 = [2,4,3], l2 = [5,6,4]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出：[7,0,8]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>解释：342 + 465 = 807.</pre></td></tr></table></figure><p>示例 2：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>输入：l1 = [0], l2 = [0]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出：[0]</pre></td></tr></table></figure><p>好家伙，又是一道奇怪的题，好好的相加硬是玩出了花儿来了，是的，我又被虐了，以我的思路我只能想到反转两个数组，然后相加，再反转回去🤔<br>\n在用我自己的思路去实现了遍，提交代码时告诉我错误，看了半天，原来不是数组，是个叫 <code>链表</code> 的结构体，说实话，一脸懵逼，什么是链表？</p>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p>祭出百度谷歌大法后，终于了解到什么是链表</p>\n<blockquote>\n<p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。 链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。 每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。</p>\n</blockquote>\n<p>其实就是一个存有前后指向的 <code>map</code>  类型，如此来说，我的思路再次被定格住了，完全没见过这样的操作呀，还是直接看题解吧。</p>\n<h1 id=\"学思维\"><a class=\"markdownIt-Anchor\" href=\"#学思维\">#</a> 学思维</h1>\n<p>由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。</p>\n<p>我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。具体而言，如果当前两个链表处相应位置的数字为 n1，n2，进位值为 carry，则它们的和为 n1 + n2 + carry；其中，答案链表处相应位置的数字为 (n1 + n2 + carry) mod 10，而新的进位值为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mfrac><mrow><mi>n</mi><mn>1</mn><mo>+</mo><mi>n</mi><mn>2</mn><mo>+</mo><mi>c</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>y</mi></mrow><mn>10</mn></mfrac></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{c}\n\n\\frac {n1+n2+carry}{10}\n\n\\end{array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2572160000000001em;vertical-align:-0.378608em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8786080000000001em;\"><span style=\"top:-2.981392em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.897216em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.378608em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 0。</p>\n<p>此外，如果链表遍历结束后，有 carry &gt; 0，还需要在答案链表的后面附加一个节点，节点的值为 carry。</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param &#123;ListNode&#125; l1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param &#123;ListNode&#125; l2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @return &#123;ListNode&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">addTwoNumbers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l1<span class=\"token punctuation\">,</span> l2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">||</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> l1 <span class=\"token operator\">?</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">const</span> n2 <span class=\"token operator\">=</span> l2 <span class=\"token operator\">?</span> l2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            tail <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        carry <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"学习过程\"><a class=\"markdownIt-Anchor\" href=\"#学习过程\">#</a> 学习过程</h2>\n<p>对于我这种初学算法者来说，这段代码可谓是无厘头，乍眼一看，几乎看不懂，我在看这里的时候来回看了几次没发现关键点在哪里，脑海里似乎有个过程动画在复现，但是又不能完全理解，这里有几个关键点：</p>\n<ul>\n<li>始终在操作指向的 next</li>\n<li>保存进位</li>\n<li>位数不同补 0 处理</li>\n</ul>\n<p>我在第一点困扰了很久，为什么始终在操作 tail 和 tail 的 next，最终却 return head 呢？<br>\n想不明白，那就直接上手敲，打开了控制台，然后尝试了一番，终于得到结论了：</p>\n<blockquote>\n<p>在 js 中对象是引用关系，变量指针指向内存地址，因此 <code>head = tail = new ListNode(sum % 10)</code>  使得 <code>head</code>  始终指向 <code>tail</code> 。</p>\n</blockquote>\n<p>第二点好理解，每次位数之间相加最大值为 18，&gt;= 10 的时候，将进位保存，以便下个位数相加进位。<br>\n第三点的意思是当两个链表位数不同的时候，那么需要补 0，<br>\n例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>123 + 45678</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>↓</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1 -> 2 -> 3 -> 4 -> 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">+</span>    <span class=\"token list punctuation\">+</span>    <span class=\"token list punctuation\">+</span>    <span class=\"token list punctuation\">+</span>    + </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>4 -> 5 -> 6 -> 7 -> 8</pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>我觉得这种方式是一种利用指针指向的便捷，类似使用的方案的有 vue 和 react 的虚拟 dom 的数据绑定，目的是为了减少空间复杂度，提升性能。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://github.com/Catlina-2B/catlina-2B.github.io/2022/04/02/twoSum/",
            "url": "https://github.com/Catlina-2B/catlina-2B.github.io/2022/04/02/twoSum/",
            "title": "两数之和",
            "date_published": "2022-04-02T08:43:00.000Z",
            "content_html": "<h1 id=\"学算法\"><a class=\"markdownIt-Anchor\" href=\"#学算法\">#</a> 学算法</h1>\n<p>两数之和是我入门力扣的第一道题，不知道在第一次看到题目的时候你们是不是跟我一样？<br>\n没错，就是看不懂😭<br>\n为什么两数之和要写算法去实现，不能直接相加吗？</p>\n<h2 id=\"看一下题目\"><a class=\"markdownIt-Anchor\" href=\"#看一下题目\">#</a> 看一下题目：</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>你可以按任意顺序返回答案。</pre></td></tr></table></figure><h2 id=\"示例1\"><a class=\"markdownIt-Anchor\" href=\"#示例1\">#</a> 示例 1：</h2>\n<blockquote>\n<p>输入：nums = [2,7,11,15], target = 9<br>\n 输出：[0,1]<br>\n 解释：因为 nums [0] + nums [1] == 9，返回 [0, 1]。</p>\n</blockquote>\n<p>好吧，家人们，是我草率了，原来是找出两个数相加等于 target 的索引，这题目出的就很好，我下意识的思考逻辑是，<br>\n按照冒泡排序的方式逐一匹配相加，但是这种方式显然很低级，肯定不会出现在这种算法题库中的。</p>\n<p>思考了一会儿，完全没有思路，无奈放弃思考了，俗话说，学得 1 加 1，方知 6 加 9，还是先看看题解吧。</p>\n<h1 id=\"学思维\"><a class=\"markdownIt-Anchor\" href=\"#学思维\">#</a> 学思维</h1>\n<p>看完题解后我恍然大悟，果然是有更优秀的方法的</p>\n<h2 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h2>\n<p>首先查询表中是否有 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。<br>\n这种方法是利用了 <code>Object</code>  的 <code>key</code>  值唯一性，以及天生的查找快速的特性，使得时间复杂性和空间复杂性都得到了减少。<br>\n因此，遍历过程中只需要查看表中是否有 target，如果有，那么当前索引就是结果。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">twosum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dic<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            dic<span class=\"token punctuation\">[</span>target <span class=\"token operator\">-</span> cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> dic<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>学到了， <code>Object</code>  的 <code>key</code>  值唯一性还是很好用的，从这一刻开始我开启了算法学习的道路，同道者，共勉！</p>\n",
            "tags": [
                "算法"
            ]
        }
    ]
}